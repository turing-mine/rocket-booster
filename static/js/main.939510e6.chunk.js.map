{"version":3,"sources":["components/header/logo.svg","components/theme/Theme.tsx","components/header/Header.tsx","components/tabular/Tabular.tsx","components/dashboard/Dashboard.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["module","exports","Theme","props","changeThemeHandler","event","target","checked","value","setState","state","themeMode","className","this","name","type","onChange","React","Component","Header","src","logo","alt","data-metaphor","href","rel","Tabular","Dashboard","App","observable","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"iHAAAA,EAAOC,QAAU,IAA0B,kC,uUC0C5BC,G,wDA7BX,WAAYC,GAAa,IAAD,8BACpB,cAAMA,IAIVC,mBAAqB,SAACC,GACdA,EAAMC,OAAOC,QACc,SAAvBF,EAAMC,OAAOE,OACb,EAAKC,UAAS,SAAAC,GAAK,MAAK,CAAEC,UAAW,WAIzC,EAAKF,UAAS,SAAAC,GAAK,MAAK,CAAEC,UAAW,EAAKR,MAAMQ,eAVpD,EAAKD,MAAQ,CAAEC,UAAW,EAAKR,MAAMQ,WAFjB,E,qDAiBpB,OACI,yBAAKC,UAAS,gBAAWC,KAAKH,MAAMC,YAChC,0BAAMG,KAAK,SACP,2BAAOA,KAAK,OAAOC,KAAK,WAAWP,MAAM,OAAOQ,SAAUH,KAAKT,qBADnE,oBAEyB,6BAFzB,aAGeS,KAAKH,MAAMC,UAH1B,6B,GApBIM,IAAMC,YC+BXC,E,kDA5BX,WAAYhB,GAAa,IAAD,8BACpB,cAAMA,IACDO,MAAQ,CAAEC,UAAW,EAAKR,MAAMQ,WAFjB,E,qDAMpB,OACI,yBAAKC,UAAS,iBAAYC,KAAKH,MAAMC,YACjC,gCACI,kBAAC,EAAD,CAAOA,UAAWE,KAAKH,MAAMC,YAC7B,yBAAKS,IAAKC,IAAMT,UAAU,WAAWU,IAAI,SACzC,uBAAGC,gBAAc,QAAjB,iBAGA,uBACIX,UAAU,WACVY,KAAK,sBACLlB,OAAO,SACPmB,IAAI,uBAJR,0B,GAfCR,IAAMC,WCqDZQ,G,wDAtDX,WAAYvB,GAAa,IAAD,8BACpB,cAAMA,IACDO,MAAQ,CAAEC,UAAW,EAAKR,MAAMQ,WAFjB,E,qDAMpB,OACI,yBAAKC,UAAS,kBAAaC,KAAKH,MAAMC,YAClC,+BACI,+BACI,4BACI,6CACA,qCACA,0CAGR,+BACI,4BACI,8CACA,sCACA,uCAEJ,4BACI,oDACA,sCACA,uCAEJ,4BACI,2CACA,uCACA,uCAEJ,4BACI,8CACA,sCACA,uCAEJ,4BACI,oDACA,sCACA,uCAEJ,4BACI,2CACA,uCACA,8C,GA9CNM,IAAMC,YCEbS,G,6KARP,OACI,yBAAKf,UAAU,kB,GAHHK,IAAMC,YCqCfU,G,gHA1BVC,K,wEAAuB,a,kDAIxB,WAAY1B,GAAa,IAAD,8BACpB,cAAMA,IACDO,MAAQ,CAACC,UAAU,WAFJ,E,qDAMpB,OACI,yBAAKC,UAAS,cAASC,KAAKH,MAAMC,YAC9B,yBAAKY,gBAAc,aACf,kBAAC,EAAD,OAEJ,yBAAKA,gBAAc,UACf,kBAAC,EAAD,CAAQZ,UAAWE,KAAKH,MAAMC,aAElC,yBAAKY,gBAAc,WACf,kBAAC,EAAD,CAASZ,UAAWE,KAAKH,MAAMC,kB,GAhBjCM,IAAMC,YCNJY,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCVNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SD+HpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.939510e6.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","\nimport React from 'react'\nimport './Theme.scss'\n\ninterface ThemeState {\n    themeMode: string\n}\n\ninterface ThemeProps {\n   themeMode: string\n}\n\nclass Theme extends React.Component<ThemeProps, ThemeState> {\n    constructor(props: any) {\n        super(props)\n        this.state = { themeMode: this.props.themeMode }\n    }\n    \n    changeThemeHandler = (event:any) => {\n        if (event.target.checked) {\n            if (event.target.value === 'dark') {\n                this.setState(state => ({ themeMode: 'dark' }))\n            }\n        }\n        else {\n            this.setState(state => ({ themeMode: this.props.themeMode }))\n        }\n    }\n    \n    render() {\n        return (\n            <div className={`Theme ${this.state.themeMode}`}>\n                <form name=\"theme\">\n                    <input name=\"mode\" type=\"checkbox\" value=\"dark\" onChange={this.changeThemeHandler}/>\n                    &nbsp;&nbsp;Dark Mode<br/>\n                    settings: {this.state.themeMode} theme, xx row limit\n                </form>\n            </div> \n        )\n    }\n}\n\nexport default Theme\n\n","\nimport React from 'react'\nimport './Header.scss'\nimport logo from './logo.svg'\nimport Theme from '../theme/Theme'\n\ninterface HeaderProps {\n    themeMode: string\n}\n\ninterface HeaderState {\n    themeMode: string\n}\n\nclass Header extends React.Component<HeaderProps, HeaderState> {\n    constructor(props: any) {\n        super(props)\n        this.state = { themeMode: this.props.themeMode }\n    }\n\n    render() {\n        return (\n            <div className={`Header ${this.state.themeMode}`}>\n                <header>\n                    <Theme themeMode={this.state.themeMode}/>\n                    <img src={logo} className=\"App-logo\" alt=\"logo\" />\n                    <p data-metaphor=\"link\">\n                        RocketBooster\n                    </p>\n                    <a\n                        className=\"App-link\"\n                        href=\"https://reactjs.org\"\n                        target=\"_blank\"\n                        rel=\"noopener noreferrer\"\n                    >\n                        Â¡Learn React!\n                    </a>\n                </header>\n            </div>\n        )\n    }\n}\n\nexport default Header\n\n ","\nimport React from 'react'\nimport './Tabular.scss'\n\ninterface TabularState {\n    themeMode: string\n}\n\ninterface TabularProps {\n   themeMode: string\n}\n\nclass Tabular extends React.Component<TabularProps, TabularState> {\n    constructor(props: any) {\n        super(props)\n        this.state = { themeMode: this.props.themeMode }\n    }\n    \n    render() {\n        return (\n            <div className={`Tabular ${this.state.themeMode}`}>\n                <table>\n                    <thead>\n                        <tr>\n                            <th>Ticker (Name)</th>\n                            <th>Close</th>\n                            <th>Dividend</th>\n                        </tr>\n                    </thead>\n                    <tbody>\n                        <tr>\n                            <td>KO (Coca Cola)</td>\n                            <td>$47.72</td>\n                            <td>$1.618</td>\n                        </tr>\n                        <tr>\n                            <td>AMT (American Tower)</td>\n                            <td>$47.50</td>\n                            <td>$3.825</td>\n                        </tr>\n                        <tr>\n                            <td>APPL (APPL)</td>\n                            <td>$450.91</td>\n                            <td>$3.040</td>\n                        </tr>\n                        <tr>\n                            <td>KO (Coca Cola)</td>\n                            <td>$47.72</td>\n                            <td>$1.618</td>\n                        </tr>\n                        <tr>\n                            <td>AMT (American Tower)</td>\n                            <td>$47.50</td>\n                            <td>$3.825</td>\n                        </tr>\n                        <tr>\n                            <td>APPL (APPL)</td>\n                            <td>$450.91</td>\n                            <td>$3.040</td>\n                        </tr>\n                    </tbody>\n                </table>\n            </div>\n        )\n    }\n}\n\nexport default Tabular\n\n ","\nimport React from 'react'\nimport './Dashboard.scss'\n\nclass Dashboard extends React.Component {\n    render() {\n        return (\n            <div className=\"Dashboard\">\n            \n            </div>\n        )\n    }\n}\n\nexport default Dashboard\n\n","\nimport React from 'react'\nimport { observable } from \"mobx\"\n\nimport './App.scss'\n\nimport Header from './components/header/Header'\nimport Tabular from './components/tabular/Tabular'\nimport Dashboard from './components/dashboard/Dashboard'\n\ninterface AppState {\n    themeMode: string\n}\n\nclass uiSetting {\n    @observable themeMode = \"default\"\n}\n\nclass App extends React.Component<{}, AppState> {\n    constructor(props: any) {\n        super(props)\n        this.state = {themeMode:'default'}\n    }\n\n    render() {\n        return (\n            <div className={`App ${this.state.themeMode}`}>\n                <div data-metaphor=\"dashboard\">\n                    <Dashboard/>\n                </div>\n                <div data-metaphor=\"header\">\n                    <Header themeMode={this.state.themeMode}/>\n                </div>\n                <div data-metaphor=\"tabular\">\n                    <Tabular themeMode={this.state.themeMode}/>\n                </div>\n            </div>\n        )\n    }\n}\n\nexport default App\n\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport '../node_modules/bootstrap/dist/css/bootstrap.min.css'\nimport './index.scss';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n\n "],"sourceRoot":""}